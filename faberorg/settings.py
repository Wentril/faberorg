"""
Django settings for faberorg project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Security
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY must be set in environment variables")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'faberorg.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'faberorg.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'faberorg'),
        'USER': os.environ.get('POSTGRES_USER', 'faberorg'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'password'),
        'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# OIDC Authentication Settings
INSTALLED_APPS += [
    'mozilla_django_oidc',
]

AUTHENTICATION_BACKENDS = (
    'core.auth.KeycloakOIDCBackend',
    # 'mozilla_django_oidc.auth.OIDCAuthenticationBackend',  # add OIDC
    'django.contrib.auth.backends.ModelBackend',  # keep default
)

LOGIN_URL = '/oidc/authenticate/'    # redirects to Keycloak
LOGIN_REDIRECT_URL = '/'       # after successful login
LOGOUT_REDIRECT_URL = '/'  # after logout

OIDC_RP_CLIENT_ID = os.environ.get('OIDC_RP_CLIENT_ID', 'faberorg')
OIDC_RP_CLIENT_SECRET = os.environ.get('OIDC_RP_CLIENT_SECRET', 'change-me')
OIDC_RP_SIGN_ALGO = os.environ.get('OIDC_RP_SIGN_ALGO', 'RS256')
# Map username & email from Keycloak claims
OIDC_RP_SCOPES = os.environ.get('OIDC_RP_SCOPES', "")
# Store ID token in session
OIDC_STORE_ID_TOKEN = os.environ.get('OIDC_STORE_ID_TOKEN', 'True').lower() in ('true', '1', 't')

def custom_username_algo(email, claims):
    return claims.get('preferred_username', email)

OIDC_USERNAME_ALGO = custom_username_algo

KEYCLOAK_DOMAIN = os.environ.get('KEYCLOAK_DOMAIN', 'keycloak.example.com')
REALM_NAME = os.environ.get('REALM_NAME', 'faber')

OIDC_OP_AUTHORIZATION_ENDPOINT = f"https://{KEYCLOAK_DOMAIN}/realms/{REALM_NAME}/protocol/openid-connect/auth"
OIDC_OP_TOKEN_ENDPOINT = f"https://{KEYCLOAK_DOMAIN}/realms/{REALM_NAME}/protocol/openid-connect/token"
OIDC_OP_USER_ENDPOINT = f"https://{KEYCLOAK_DOMAIN}/realms/{REALM_NAME}/protocol/openid-connect/userinfo"
OIDC_OP_JWKS_ENDPOINT = f"https://{KEYCLOAK_DOMAIN}/realms/{REALM_NAME}/protocol/openid-connect/certs"
OIDC_OP_LOGOUT_ENDPOINT = f"https://{KEYCLOAK_DOMAIN}/realms/{REALM_NAME}/protocol/openid-connect/logout"

# In your production settings (e.g., settings.py or production.py)
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# OIDC settings - ensure callback uses HTTPS
OIDC_RP_CALLBACK_SCHEME = 'https'
OIDC_CALLBACK_PROTOCOL = 'https'
